# Copied from https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/Makefile.Common
# In order to ensure make instructions fail if there is command that fails a pipe (ie: `go test ... | tee -a ./test_results.txt`)
# the value `-o pipefail` (or `set -o pipefail`) is added to each shell command that make runs
# otherwise in the example command pipe, only the exit code of `tee` is recorded instead of `go test` which can cause 
# test to pass in CI when they should not.
SHELL = /bin/bash
ifeq ($(shell uname -s),Windows)
	.SHELLFLAGS = /o pipefile /c
else 
	.SHELLFLAGS = -o pipefail -c
endif

# SRC_ROOT is the top of the source tree.
SRC_ROOT := $(shell git rev-parse --show-toplevel)

# build tags required by any component should be defined as an independent variables and later added to GO_BUILD_TAGS below
GO_BUILD_TAGS=""
GOTEST_OPT?= -race -timeout 300s -parallel 4 --tags=$(GO_BUILD_TAGS)
GOTEST_INTEGRATION_OPT?= -race -timeout 360s -parallel 4
GOTEST_OPT_WITH_COVERAGE = $(GOTEST_OPT) -coverprofile=cover.out -covermode=atomic
GOTEST_OPT_WITH_INTEGRATION=$(GOTEST_INTEGRATION_OPT) -tags=integration,$(GO_BUILD_TAGS) -run=Integration -coverprofile=integration-coverage.txt -covermode=atomic
GOCMD?= go
GOTEST=$(GOCMD) test
GOOS=$(shell $(GOCMD) env GOOS)
GOARCH=$(shell $(GOCMD) env GOARCH)
SYFT_VERSION= v0.84.0

# In order to help reduce toil related to managing tooling for the open telemetry collector
# this section of the makefile looks at only requiring command definitions to be defined
# as part of $(TOOLS_MOD_DIR)/tools.go, following the existing practice.
# Modifying the tools' `go.mod` file will trigger a rebuild of the tools to help
# ensure that all contributors are using the most recent version to make builds repeatable everywhere.
TOOLS_MOD_DIR    := $(SRC_ROOT)/internal/tools
TOOLS_MOD_REGEX  := "\s+_\s+\".*\""
TOOLS_PKG_NAMES  := $(shell grep -E $(TOOLS_MOD_REGEX) < $(TOOLS_MOD_DIR)/tools.go | tr -d " _\"")
TOOLS_BIN_DIR    := $(SRC_ROOT)/.tools
TOOLS_BIN_NAMES  := $(addprefix $(TOOLS_BIN_DIR)/, $(notdir $(TOOLS_PKG_NAMES)))
BUILD_DIR		 := $(SRC_ROOT)/build
DIST_DIR		 := $(SRC_ROOT)/dist
COVER_DIR := $(SRC_ROOT)/coverage/unit
TEST_DIR := $(SRC_ROOT)/testing/result

.PHONY: install-tools
install-tools: $(TOOLS_BIN_NAMES) install-syft

$(TOOLS_BIN_DIR):
	mkdir -p $@
$(BUILD_DIR):
	mkdir -p $@
$(DIST_DIR):
	mkdir -p $@

$(TOOLS_BIN_NAMES): $(TOOLS_BIN_DIR) $(TOOLS_MOD_DIR)/go.mod
	cd $(TOOLS_MOD_DIR) && $(GOCMD) build -o $@ -trimpath $(filter %/$(notdir $@),$(TOOLS_PKG_NAMES))

MDLINKCHECK         := $(TOOLS_BIN_DIR)/markdown-link-check
MISSPELL            := $(TOOLS_BIN_DIR)/misspell -error
MISSPELL_CORRECTION := $(TOOLS_BIN_DIR)/misspell -w
LINT                := $(TOOLS_BIN_DIR)/golangci-lint
GOIMPORTS           := $(TOOLS_BIN_DIR)/goimports
PORTO               := $(TOOLS_BIN_DIR)/porto
GOTESTSUM           := $(TOOLS_BIN_DIR)/gotestsum
BUILDER             := $(TOOLS_BIN_DIR)/builder
GOVULNCHECK         := $(TOOLS_BIN_DIR)/govulncheck
GORELEASER			:= $(TOOLS_BIN_DIR)/goreleaser
SYFT				:= $(TOOLS_BIN_DIR)/syft
# BUILD_TYPE should be one of (dev, release).
BUILD_TYPE?=release

pwd:
	@pwd

.DEFAULT_GOAL := common

.PHONY: common
common: lint

.PHONY: test
test:
	$(GOTEST) $(GOTEST_OPT) ./...

.PHONY: test-with-cover
test-with-cover:
	mkdir -p $(COVER_DIR)
	mkdir -p $(TEST_DIR)
	$(GOTESTSUM) --junitfile $(TEST_DIR)/$(MOD).xml --jsonfile $(TEST_DIR)/$(MOD).json -- -coverprofile=$(COVER_DIR)/$(MOD).out $(GOTEST_OPT)

.PHONY: do-unit-tests-with-cover
do-unit-tests-with-cover:
	@echo "running $(GOCMD) unit test ./... + coverage in `pwd`"
	$(GOTEST) $(GOTEST_OPT_WITH_COVERAGE) ./...
	$(GOCMD) tool cover -html=coverage.txt -o coverage.html

.PHONY: do-integration-tests-with-cover
do-integration-tests-with-cover:
	@echo "running $(GOCMD) integration test ./... + coverage in `pwd`"
	$(GOTEST) $(GOTEST_OPT_WITH_INTEGRATION) ./...
	@if [ -e integration-coverage.txt ]; then \
  		$(GOCMD) tool cover -html=integration-coverage.txt -o integration-coverage.html; \
  	fi

.PHONY: benchmark
benchmark:
	$(GOTEST) -bench=. -run=notests --tags=$(GO_BUILD_TAGS) $(ALL_PKGS)

.PHONY: fmt
fmt: $(GOIMPORTS)
	gofmt  -w -s ./
	$(GOIMPORTS) -w  -local github.com/open-telemetry/opentelemetry-collector-contrib ./

.PHONY: lint
lint: $(LINT)
	$(LINT) run --allow-parallel-runners --build-tags integration --path-prefix $(shell basename "$(CURDIR)")

.PHONY: govulncheck
govulncheck: $(GOVULNCHECK)
	$(GOVULNCHECK) ./...

.PHONY: tidy
tidy:
	rm -fr go.sum
	$(GOCMD) mod tidy -compat=1.21

.PHONY: misspell
misspell: $(TOOLS_BIN_DIR)/misspell
	@echo "running $(MISSPELL)"
	@$(MISSPELL) $(ALL_SRC_AND_DOC)

.PHONY: misspell-correction
misspell-correction: $(TOOLS_BIN_DIR)/misspell
	$(MISSPELL_CORRECTION) $(ALL_SRC_AND_DOC)

.PHONY: moddownload
moddownload:
	$(GOCMD) mod download

.PHONY: updatedep
updatedep:
	$(PWD)/internal/buildscripts/update-dep
	@$(MAKE) tidy

.PHONY: install-syft
install-syft:
	curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) $(SYFT_VERSION)

.PHONY: install-goreleaser
install-goreleaser:
	$(GOCMD) install github.com/goreleaser/goreleaser@latest

.PHONY: cleanup
cleanup:
	if [ -d  $(TOOLS_BIN_DIR) ]; then rm -r $(TOOLS_BIN_DIR); fi
	if [ -d  $(DIST_DIR) ]; then rm -r $(DIST_DIR); fi
	if [ -d  $(BUILD_DIR) ]; then rm -r $(BUILD_DIR); fi
	if [ -d  $(COVER_DIR) ]; then rm -r $(COVER_DIR); fi
	if [ -d  $(TEST_DIR) ]; then rm -r $(TEST_DIR); fi